// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateAccountParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.Email, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, name, email, password_hash
FROM accounts
WHERE email = $1
`

func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const findAccountByID = `-- name: FindAccountByID :one
SELECT id, name, email, password_hash
FROM accounts
WHERE id = $1
`

func (q *Queries) FindAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}
