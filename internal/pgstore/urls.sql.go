// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: urls.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (original_url, code, owner_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateURLParams struct {
	OriginalUrl string    `json:"original_url"`
	Code        string    `json:"code"`
	OwnerID     uuid.UUID `json:"owner_id"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createURL, arg.OriginalUrl, arg.Code, arg.OwnerID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const findByCode = `-- name: FindByCode :one
SELECT id, code, owner_id, original_url, clicks, created_at, updated_at
FROM urls
WHERE code = $1
`

type FindByCodeRow struct {
	ID          uuid.UUID `json:"id"`
	Code        string    `json:"code"`
	OwnerID     uuid.UUID `json:"owner_id"`
	OriginalUrl string    `json:"original_url"`
	Clicks      int32     `json:"clicks"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) FindByCode(ctx context.Context, code string) (FindByCodeRow, error) {
	row := q.db.QueryRow(ctx, findByCode, code)
	var i FindByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.OwnerID,
		&i.OriginalUrl,
		&i.Clicks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
